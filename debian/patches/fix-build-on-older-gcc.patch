Index: beta/ui/gfx/x/gen_xproto.py
===================================================================
--- beta.orig/ui/gfx/x/gen_xproto.py
+++ beta/ui/gfx/x/gen_xproto.py
@@ -286,7 +286,7 @@ class GenXproto(FileWriter):
             return 'Request'
         elif t.is_reply:
             return 'Reply'
-        elif t.is_event:
+        elif isinstance(t, self.xcbgen.xtypes.Event):
             return 'Event'
         return ''
 
@@ -487,7 +487,7 @@ class GenXproto(FileWriter):
                 copy_basic()
             else:
                 container_type, container_name = field.parent
-                assert container_type.is_event
+                assert isinstance(container_type, self.xcbgen.xtypes.Event)
                 # Extension events require offsetting the opcode, so make
                 # sure this path is only hit for non-extension events for now.
                 assert not self.module.namespace.is_ext
@@ -512,7 +512,8 @@ class GenXproto(FileWriter):
             self.copy_primitive(name)
 
     def declare_case(self, case):
-        assert case.type.is_case != case.type.is_bitcase
+        if hasattr(case.type, 'is_case'):
+            assert case.type.is_case != case.type.is_bitcase
 
         fields = [
             field for case_field in case.type.fields
@@ -528,7 +529,10 @@ class GenXproto(FileWriter):
         return [(typename, name)]
 
     def copy_case(self, case, switch_name):
-        op = 'CaseEq' if case.type.is_case else 'CaseAnd'
+        if hasattr(case.type, "is_case"):
+            op = 'CaseEq' if case.type.is_case else 'CaseAnd'
+        else:
+            op = 'CaseAnd'
         condition = ' || '.join([
             '%s(%s_expr, %s)' % (op, switch_name, self.expr(expr))
             for expr in case.type.expr
@@ -1038,7 +1042,7 @@ class GenXproto(FileWriter):
             self.write_special_container(item, name)
         if isinstance(item, self.xcbgen.xtypes.Request):
             self.define_request(item)
-        elif item.is_event:
+        elif isinstance(item, self.xcbgen.xtypes.Event):
             self.define_event(item, name)
         elif isinstance(item, self.xcbgen.xtypes.Error):
             self.define_error(item, name)
@@ -1048,7 +1052,7 @@ class GenXproto(FileWriter):
             self.declare_union(item)
         elif isinstance(item, self.xcbgen.xtypes.Request):
             self.declare_request(item)
-        elif item.is_event:
+        elif isinstance(item, self.xcbgen.xtypes.Event):
             self.declare_event(item, name)
         elif isinstance(item, self.xcbgen.xtypes.Error):
             self.declare_error(item, name)
@@ -1130,7 +1134,7 @@ class GenXproto(FileWriter):
                         and field_name in fields):
                     setattr(fields[field_name], for_type, field)
 
-            if field.type.is_switch or field.type.is_case_or_bitcase:
+            if field.type.is_switch or (field.type.is_case_or_bitcase if hasattr(field.type, 'is_case_or_bitcase') else field.type.is_bitcase):
                 self.resolve_type(field.type, field.field_type)
 
         if isinstance(t, self.xcbgen.xtypes.Request) and t.reply:
@@ -1254,6 +1258,11 @@ class GenXproto(FileWriter):
         for direct_import in sorted(list(imports)):
             self.write('#include "%s.h"' % direct_import[-1])
         self.write()
+        self.write('#define X11_%s_MAJOR_VERSION %s' %
+                (self.class_name.upper(), self.module.namespace.major_version))
+        self.write('#define X11_%s_MINOR_VERSION %s' %
+                (self.class_name.upper(), self.module.namespace.minor_version))
+        self.write()
         self.write('namespace x11 {')
         self.write()
         self.write('class Connection;')
Index: beta/ui/gfx/linux/drm_util_linux.cc
===================================================================
--- beta.orig/ui/gfx/linux/drm_util_linux.cc
+++ beta/ui/gfx/linux/drm_util_linux.cc
@@ -8,6 +8,15 @@
 
 #include "base/notreached.h"
 
+#ifndef DRM_FORMAT_INVALID
+// TODO(mcasas): Remove when uprevving //third_party/libdrm.
+#define DRM_FORMAT_INVALID 0
+#endif
+
+#ifndef DRM_FORMAT_P010
+#define DRM_FORMAT_P010 fourcc_code('P', '0', '1', '0')
+#endif
+
 namespace ui {
 
 int GetFourCCFormatFromBufferFormat(gfx::BufferFormat format) {
Index: beta/ui/base/x/x11_display_util.cc
===================================================================
--- beta.orig/ui/base/x/x11_display_util.cc
+++ beta/ui/base/x/x11_display_util.cc
@@ -38,6 +38,7 @@ std::map<x11::RandR::Output, int> GetMon
                                               x11::RandR* randr,
                                               x11::Window window) {
   std::map<x11::RandR::Output, int> output_to_monitor;
+#if X11_RANDR_MINOR_VERSION >= 5
   if (version >= 105) {
     if (auto reply = randr->GetMonitors({window}).Sync()) {
       for (size_t monitor = 0; monitor < reply->monitors.size(); monitor++) {
@@ -46,6 +47,7 @@ std::map<x11::RandR::Output, int> GetMon
       }
     }
   }
+#endif
   return output_to_monitor;
 }
 
Index: beta/third_party/wayland/src/src/scanner.c
===================================================================
--- beta.orig/third_party/wayland/src/src/scanner.c
+++ beta/third_party/wayland/src/src/scanner.c
@@ -980,17 +980,6 @@ verify_arguments(struct parse_context *c
 
 }
 
-#ifndef HAVE_STRNDUP
-char *
-strndup(const char *s, size_t size)
-{
-	char *r = malloc(size + 1);
-	strncpy(r, s, size);
-	r[size] = '\0';
-	return r;
-}
-#endif
-
 static void
 end_element(void *data, const XML_Char *name)
 {
Index: beta/third_party/snappy/src/snappy.cc
===================================================================
--- beta.orig/third_party/snappy/src/snappy.cc
+++ beta/third_party/snappy/src/snappy.cc
@@ -1041,15 +1041,8 @@ size_t AdvanceToNextTagX86Optimized(cons
   size_t literal_len = *tag >> 2;
   size_t tag_type = *tag;
   bool is_literal;
-#if defined(__GNUC__) && defined(__x86_64__)
-  // TODO clang misses the fact that the (c & 3) already correctly
-  // sets the zero flag.
-  asm("and $3, %k[tag_type]\n\t"
-      : [tag_type] "+r"(tag_type), "=@ccz"(is_literal));
-#else
   tag_type &= 3;
   is_literal = (tag_type == 0);
-#endif
   // TODO
   // This is code is subtle. Loading the values first and then cmov has less
   // latency then cmov ip and then load. However clang would move the loads
Index: beta/media/gpu/chromeos/platform_video_frame_utils.cc
===================================================================
--- beta.orig/media/gpu/chromeos/platform_video_frame_utils.cc
+++ beta/media/gpu/chromeos/platform_video_frame_utils.cc
@@ -40,6 +40,10 @@
 #include "ui/gfx/linux/native_pixmap_dmabuf.h"
 #include "ui/gfx/native_pixmap.h"
 
+#ifndef DRM_FORMAT_INVALID
+#define DRM_FORMAT_INVALID 0
+#endif
+
 namespace media {
 
 namespace {
Index: beta/mojo/core/channel_linux.cc
===================================================================
--- beta.orig/mojo/core/channel_linux.cc
+++ beta/mojo/core/channel_linux.cc
@@ -48,6 +48,34 @@
 #define EFD_ZERO_ON_WAKE O_NOFOLLOW
 #endif
 
+#if !defined(F_ADD_SEALS)
+#define F_ADD_SEALS	1033
+#endif
+
+#if !defined(F_GET_SEALS)
+#define F_GET_SEALS	1034
+#endif
+
+#if !defined(F_SEAL_SEAL)
+#define F_SEAL_SEAL	0x0001	
+#endif
+
+#if !defined(F_SEAL_SHRINK)
+#define F_SEAL_SHRINK	0x0002
+#endif
+
+#if !defined(F_SEAL_GROW)
+#define F_SEAL_GROW	0x0004
+#endif
+
+#if !defined(F_SEAL_WRITE)
+#define F_SEAL_WRITE	0x0008
+#endif
+
+#if !defined(F_SEAL_FUTURE_WRITE)
+#define F_SEAL_FUTURE_WRITE	0x0010
+#endif
+
 namespace mojo {
 namespace core {
 
Index: beta/third_party/devtools-frontend/src/node_modules/minify-html-literals/src/strategy.js
===================================================================
--- beta.orig/third_party/devtools-frontend/src/node_modules/minify-html-literals/src/strategy.js
+++ beta/third_party/devtools-frontend/src/node_modules/minify-html-literals/src/strategy.js
@@ -71,25 +71,6 @@ exports.defaultStrategy = {
             ...options,
             minifyCSS: adjustedMinifyCSSOptions
         });
-        if (options.collapseWhitespace) {
-            // html-minifier does not support removing newlines inside <svg>
-            // attributes. Support this, but be careful not to remove newlines from
-            // supported areas (such as within <pre> and <textarea> tags).
-            const matches = Array.from(result.matchAll(/<svg/g)).reverse();
-            for (const match of matches) {
-                const startTagIndex = match.index;
-                const closeTagIndex = result.indexOf('</svg', startTagIndex);
-                if (closeTagIndex < 0) {
-                    // Malformed SVG without a closing tag
-                    continue;
-                }
-                const start = result.substring(0, startTagIndex);
-                let svg = result.substring(startTagIndex, closeTagIndex);
-                const end = result.substring(closeTagIndex);
-                svg = svg.replace(/\r?\n/g, '');
-                result = start + svg + end;
-            }
-        }
         if (adjustedMinifyCSSOptions &&
             adjustedMinifyCSSOptions.level[optimization_level_1.OptimizationLevel.One].tidySelectors) {
             // Fix https://github.com/jakubpawlowicz/clean-css/issues/996
@@ -163,4 +144,4 @@ function fixCleanCssTidySelectors(origin
     }
     return result;
 }
-//# sourceMappingURL=strategy.js.map
\ No newline at end of file
+//# sourceMappingURL=strategy.js.map
