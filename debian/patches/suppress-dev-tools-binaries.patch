Index: beta/third_party/blink/renderer/bindings/scripts/bind_gen/style_format.py
===================================================================
--- beta.orig/third_party/blink/renderer/bindings/scripts/bind_gen/style_format.py
+++ beta/third_party/blink/renderer/bindings/scripts/bind_gen/style_format.py
@@ -95,9 +95,9 @@ def _invoke_format_command(command_line,
     exit_code = proc.wait()
 
     return StyleFormatResult(
-        stdout_output=stdout_output,
-        stderr_output=stderr_output,
-        exit_code=exit_code,
+        stdout_output=contents,
+        stderr_output="",
+        exit_code=0,
         filename=filename)
 
 
Index: beta/third_party/devtools-frontend/src/scripts/devtools_paths.py
===================================================================
--- beta.orig/third_party/devtools-frontend/src/scripts/devtools_paths.py
+++ beta/third_party/devtools-frontend/src/scripts/devtools_paths.py
@@ -38,13 +38,10 @@ def third_party_path():
 
 # This points to the node binary downloaded as part of the checkout.
 def node_path():
-    try:
-        old_sys_path = sys.path[:]
-        sys.path.append(path.join(third_party_path(), 'node'))
-        import node
-    finally:
-        sys.path = old_sys_path
-    return node.GetBinaryPath()
+    if path.exists("/usr/lib/nodejs-mozilla/bin/node"):
+        return "/usr/lib/nodejs-mozilla/bin/node"
+    else:
+        return "/usr/bin/nodejs"
 
 
 def devtools_root_path():
Index: beta/third_party/node/node.py
===================================================================
--- beta.orig/third_party/node/node.py
+++ beta/third_party/node/node.py
@@ -11,6 +11,11 @@ import os
 
 
 def GetBinaryPath():
+  if platform.system() == 'Linux':
+    if os_path.exists("/usr/lib/nodejs-mozilla/bin/node"):
+      return "/usr/lib/nodejs-mozilla/bin/node"
+    else:
+      return "/usr/bin/nodejs"
   darwin_name = ('node-darwin-arm64' if platform.machine() == 'arm64' else
                  'node-darwin-x64')
   return os_path.join(os_path.dirname(__file__), *{
Index: beta/tools/metrics/histograms/expand_owners.py
===================================================================
--- beta.orig/tools/metrics/histograms/expand_owners.py
+++ beta/tools/metrics/histograms/expand_owners.py
@@ -402,7 +402,9 @@ def ExpandHistogramsOWNERS(histograms):
 
       _UpdateHistogramOwners(histogram, owner, owners_to_add)
 
-      component = _ExtractComponentViaDirmd(os.path.dirname(path))
+      # Chromium's way of getting the component info involves downloading an
+      # external binary and running it to get some info. Block it for now.
+      component = None
       if component and component not in components_with_dom_elements:
         components_with_dom_elements.add(component)
         AddHistogramComponent(histogram, component)
Index: beta/third_party/closure_compiler/compiler.py
===================================================================
--- beta.orig/third_party/closure_compiler/compiler.py
+++ beta/third_party/closure_compiler/compiler.py
@@ -13,8 +13,7 @@ import subprocess
 
 
 _CURRENT_DIR = os.path.join(os.path.dirname(__file__))
-_JAVA_PATH = os.path.join(_CURRENT_DIR, "..", "jdk", "current", "bin", "java")
-assert os.path.isfile(_JAVA_PATH), "java only allowed in android builds"
+_JAVA_PATH = "java"
 
 class Compiler(object):
   """Runs the Closure compiler on given source files to typecheck them
