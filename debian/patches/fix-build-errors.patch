Index: dev/cc/trees/frame_rate_estimator.cc
===================================================================
--- dev.orig/cc/trees/frame_rate_estimator.cc
+++ dev/cc/trees/frame_rate_estimator.cc
@@ -48,8 +48,8 @@ void FrameRateEstimator::WillDraw(base::
   // we assume that BeginFrames can not be throttled. But if the animation
   // frequency is lower than that, then using a lower frame rate is permitted.
   // The delta below is to account for minor offsets in frame times.
-  constexpr auto kFudgeDelta = base::Milliseconds(1);
-  constexpr auto kMinDelta =
+  auto kFudgeDelta = base::Milliseconds(1);
+  auto kMinDelta =
       (viz::BeginFrameArgs::DefaultInterval() * 2) - kFudgeDelta;
   if (draw_delta < kMinDelta)
     num_of_consecutive_frames_with_min_delta_++;
Index: dev/third_party/blink/renderer/platform/wtf/math_extras.h
===================================================================
--- dev.orig/third_party/blink/renderer/platform/wtf/math_extras.h
+++ dev/third_party/blink/renderer/platform/wtf/math_extras.h
@@ -128,11 +128,11 @@ constexpr float Grad2turn(float g) {
   return g * (1.0f / 400.0f);
 }
 
-constexpr double RoundHalfTowardsPositiveInfinity(double value) {
+inline double RoundHalfTowardsPositiveInfinity(double value) {
   return std::floor(value + 0.5);
 }
 
-constexpr float RoundHalfTowardsPositiveInfinity(float value) {
+inline float RoundHalfTowardsPositiveInfinity(float value) {
   return std::floor(value + 0.5f);
 }
 
Index: dev/base/allocator/partition_allocator/starscan/state_bitmap.h
===================================================================
--- dev.orig/base/allocator/partition_allocator/starscan/state_bitmap.h
+++ dev/base/allocator/partition_allocator/starscan/state_bitmap.h
@@ -391,7 +391,7 @@ template <size_t PageSize, size_t PageAl
 template <typename Filter,
           typename CallbackForwarder,
           typename Callback,
-          bool Clear>
+          bool ClearBool>
 inline void
 StateBitmap<PageSize, PageAlignment, AllocationAlignment>::IterateImpl(
     size_t epoch,
@@ -421,7 +421,7 @@ StateBitmap<PageSize, PageAlignment, All
 
       callback_forwarder(callback, object_address, bits);
 
-      if (Clear) {
+      if (ClearBool) {
         // Clear the current bits.
         AsAtomicCell(cell_index)
             .fetch_and(clear_value_mask, std::memory_order_relaxed);
Index: dev/base/allocator/partition_allocator/partition_root.h
===================================================================
--- dev.orig/base/allocator/partition_allocator/partition_root.h
+++ dev/base/allocator/partition_allocator/partition_root.h
@@ -239,7 +239,7 @@ struct PartitionOptions {
 // Never instantiate a PartitionRoot directly, instead use
 // PartitionAllocator.
 template <bool thread_safe>
-struct PA_ALIGNAS(64) PA_COMPONENT_EXPORT(PARTITION_ALLOC) PartitionRoot {
+struct PA_COMPONENT_EXPORT(PARTITION_ALLOC) PA_ALIGNAS(64) PartitionRoot {
   using SlotSpan = internal::SlotSpanMetadata<thread_safe>;
   using Page = internal::PartitionPage<thread_safe>;
   using Bucket = internal::PartitionBucket<thread_safe>;
Index: dev/base/debug/stack_trace.cc
===================================================================
--- dev.orig/base/debug/stack_trace.cc
+++ dev/base/debug/stack_trace.cc
@@ -54,7 +54,7 @@ constexpr size_t kStackFrameAdjustment =
 // Because the signature size can vary based on the system configuration, use
 // the xpaclri instruction to remove the signature.
 static uintptr_t StripPointerAuthenticationBits(uintptr_t ptr) {
-#if defined(ARCH_CPU_ARM64)
+#if defined(ARCH_CPU_ARM64) && defined(__ARM_FEATURE_PAUTH)
   // A single Chromium binary currently spans all Arm systems (including those
   // with and without pointer authentication). xpaclri is used here because it's
   // in the HINT space and treated as a no-op on older Arm cores (unlike the
Index: dev/v8/src/execution/pointer-authentication.h
===================================================================
--- dev.orig/v8/src/execution/pointer-authentication.h
+++ dev/v8/src/execution/pointer-authentication.h
@@ -44,7 +44,7 @@ class PointerAuthentication : public All
 }  // namespace internal
 }  // namespace v8
 
-#ifdef V8_ENABLE_CONTROL_FLOW_INTEGRITY
+#if defined(V8_ENABLE_CONTROL_FLOW_INTEGRITY) && defined(__ARM_FEATURE_PAUTH)
 
 #ifndef V8_TARGET_ARCH_ARM64
 #error "V8_ENABLE_CONTROL_FLOW_INTEGRITY should imply V8_TARGET_ARCH_ARM64"
Index: dev/third_party/angle/BUILD.gn
===================================================================
--- dev.orig/third_party/angle/BUILD.gn
+++ dev/third_party/angle/BUILD.gn
@@ -1138,11 +1138,6 @@ if (angle_use_wayland) {
         "wayland-egl",
       ]
     }
-
-    include_dirs = [
-      "$wayland_dir/egl",
-      "$wayland_dir/src",
-    ]
   }
 
   group("angle_wayland") {
Index: dev/third_party/angle/src/common/vulkan/BUILD.gn
===================================================================
--- dev.orig/third_party/angle/src/common/vulkan/BUILD.gn
+++ dev/third_party/angle/src/common/vulkan/BUILD.gn
@@ -33,9 +33,6 @@ if (angle_enable_vulkan || angle_build_v
     if (angle_shared_libvulkan) {
       defines = [ "ANGLE_SHARED_LIBVULKAN=1" ]
     }
-    if (angle_use_wayland) {
-      include_dirs = [ "$wayland_dir/src" ]
-    }
     configs = [ "$angle_root:angle_vulkan_wayland_config" ]
   }
 
Index: dev/third_party/angle/src/third_party/volk/BUILD.gn
===================================================================
--- dev.orig/third_party/angle/src/third_party/volk/BUILD.gn
+++ dev/third_party/angle/src/third_party/volk/BUILD.gn
@@ -20,7 +20,4 @@ source_set("volk") {
   public_configs = [ ":volk_config" ]
   configs += [ "$angle_root:angle_no_cfi_icall" ]
   public_deps = [ "$angle_vulkan_headers_dir:vulkan_headers" ]
-  if (angle_use_wayland) {
-    include_dirs = [ "$wayland_dir/src" ]
-  }
 }
