Index: dev/cc/trees/frame_rate_estimator.cc
===================================================================
--- dev.orig/cc/trees/frame_rate_estimator.cc
+++ dev/cc/trees/frame_rate_estimator.cc
@@ -47,8 +47,8 @@ void FrameRateEstimator::WillDraw(base::
   // we assume that BeginFrames can not be throttled. But if the animation
   // frequency is lower than that, then using a lower frame rate is permitted.
   // The delta below is to account for minor offsets in frame times.
-  constexpr auto kFudgeDelta = base::Milliseconds(1);
-  constexpr auto kMinDelta =
+  auto kFudgeDelta = base::Milliseconds(1);
+  auto kMinDelta =
       (viz::BeginFrameArgs::DefaultInterval() * 2) - kFudgeDelta;
   if (draw_delta < kMinDelta)
     num_of_consecutive_frames_with_min_delta_++;
Index: dev/third_party/blink/renderer/platform/wtf/math_extras.h
===================================================================
--- dev.orig/third_party/blink/renderer/platform/wtf/math_extras.h
+++ dev/third_party/blink/renderer/platform/wtf/math_extras.h
@@ -127,11 +127,11 @@ constexpr float Grad2turn(float g) {
   return g * (1.0f / 400.0f);
 }
 
-constexpr double RoundHalfTowardsPositiveInfinity(double value) {
+inline double RoundHalfTowardsPositiveInfinity(double value) {
   return std::floor(value + 0.5);
 }
 
-constexpr float RoundHalfTowardsPositiveInfinity(float value) {
+inline float RoundHalfTowardsPositiveInfinity(float value) {
   return std::floor(value + 0.5f);
 }
 
Index: dev/base/allocator/partition_allocator/starscan/state_bitmap.h
===================================================================
--- dev.orig/base/allocator/partition_allocator/starscan/state_bitmap.h
+++ dev/base/allocator/partition_allocator/starscan/state_bitmap.h
@@ -387,7 +387,7 @@ template <size_t PageSize, size_t PageAl
 template <typename Filter,
           typename CallbackForwarder,
           typename Callback,
-          bool Clear>
+          bool ClearBool>
 inline void
 StateBitmap<PageSize, PageAlignment, AllocationAlignment>::IterateImpl(
     size_t epoch,
@@ -417,7 +417,7 @@ StateBitmap<PageSize, PageAlignment, All
 
       callback_forwarder(callback, object_address, bits);
 
-      if (Clear) {
+      if (ClearBool) {
         // Clear the current bits.
         AsAtomicCell(cell_index)
             .fetch_and(clear_value_mask, std::memory_order_relaxed);
Index: dev/base/allocator/partition_allocator/partition_root.h
===================================================================
--- dev.orig/base/allocator/partition_allocator/partition_root.h
+++ dev/base/allocator/partition_allocator/partition_root.h
@@ -198,7 +198,7 @@ struct PartitionOptions {
 // Never instantiate a PartitionRoot directly, instead use
 // PartitionAllocator.
 template <bool thread_safe>
-struct ALIGNAS(64) BASE_EXPORT PartitionRoot {
+struct BASE_EXPORT ALIGNAS(64) PartitionRoot {
   using SlotSpan = internal::SlotSpanMetadata<thread_safe>;
   using Page = internal::PartitionPage<thread_safe>;
   using Bucket = internal::PartitionBucket<thread_safe>;
Index: dev/base/sequence_checker_impl.h
===================================================================
--- dev.orig/base/sequence_checker_impl.h
+++ dev/base/sequence_checker_impl.h
@@ -24,7 +24,7 @@ class StackTrace;
 // version for your build configuration.
 // Note: This is marked with "context" capability in order to support
 // thread_annotations.h.
-class THREAD_ANNOTATION_ATTRIBUTE__(capability("context"))
+class
     BASE_EXPORT SequenceCheckerImpl {
  public:
   static void EnableStackLogging();
Index: dev/base/debug/stack_trace.cc
===================================================================
--- dev.orig/base/debug/stack_trace.cc
+++ dev/base/debug/stack_trace.cc
@@ -54,7 +54,7 @@ constexpr size_t kStackFrameAdjustment =
 // Because the signature size can vary based on the system configuration, use
 // the xpaclri instruction to remove the signature.
 static uintptr_t StripPointerAuthenticationBits(uintptr_t ptr) {
-#if defined(ARCH_CPU_ARM64)
+#if defined(ARCH_CPU_ARM64) && defined(__ARM_FEATURE_PAUTH)
   // A single Chromium binary currently spans all Arm systems (including those
   // with and without pointer authentication). xpaclri is used here because it's
   // in the HINT space and treated as a no-op on older Arm cores (unlike the
Index: dev/base/allocator/partition_allocator/partition_alloc_base/sys_byteorder.h
===================================================================
--- dev.orig/base/allocator/partition_allocator/partition_alloc_base/sys_byteorder.h
+++ dev/base/allocator/partition_allocator/partition_alloc_base/sys_byteorder.h
@@ -23,7 +23,7 @@
 namespace partition_alloc::internal::base {
 
 // Returns a value with all bytes in |x| swapped, i.e. reverses the endianness.
-inline uint16_t ByteSwap(uint16_t x) {
+inline constexpr uint16_t ByteSwap(uint16_t x) {
 #if defined(COMPILER_MSVC) && !defined(__clang__)
   return _byteswap_ushort(x);
 #else
@@ -31,7 +31,7 @@ inline uint16_t ByteSwap(uint16_t x) {
 #endif
 }
 
-inline uint32_t ByteSwap(uint32_t x) {
+inline constexpr uint32_t ByteSwap(uint32_t x) {
 #if defined(COMPILER_MSVC) && !defined(__clang__)
   return _byteswap_ulong(x);
 #else
