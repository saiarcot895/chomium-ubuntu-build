Index: dev/tools/gn/src/gn/setup.cc
===================================================================
--- dev.orig/tools/gn/src/gn/setup.cc
+++ dev/tools/gn/src/gn/setup.cc
@@ -831,7 +831,7 @@ bool Setup::FillPythonPath(const base::C
     }
     build_settings_.set_python_path(python_path);
 #else
-    build_settings_.set_python_path(base::FilePath("python"));
+    build_settings_.set_python_path(base::FilePath("python2"));
 #endif
   }
   return true;
Index: dev/third_party/catapult/common/py_vulcanize/py_vulcanize/generate.py
===================================================================
--- dev.orig/third_party/catapult/common/py_vulcanize/py_vulcanize/generate.py
+++ dev/third_party/catapult/common/py_vulcanize/py_vulcanize/generate.py
@@ -83,7 +83,7 @@ def _MinifyJS(input_js):
 
   with tempfile.NamedTemporaryFile() as _:
     args = [
-        sys.executable,
+        'python3',
         rjsmin_path
     ]
     p = subprocess.Popen(args,
Index: dev/ui/gfx/x/gen_xproto.py
===================================================================
--- dev.orig/ui/gfx/x/gen_xproto.py
+++ dev/ui/gfx/x/gen_xproto.py
@@ -1109,7 +1109,7 @@ class GenXproto(FileWriter):
 
         self.resolve_element(t.elt, fields)
 
-        for field in fields.values():
+        for field in list(fields.values()):
             if field.field_name == 'sequence':
                 field.visible = True
             field.parent = (t, name)
@@ -1258,10 +1258,11 @@ class GenXproto(FileWriter):
         for direct_import in sorted(list(imports)):
             self.write('#include "%s.h"' % direct_import[-1])
         self.write()
-        self.write('#define X11_%s_MAJOR_VERSION %s' %
-                (self.class_name.upper(), self.module.namespace.major_version))
-        self.write('#define X11_%s_MINOR_VERSION %s' %
-                (self.class_name.upper(), self.module.namespace.minor_version))
+        if self.module.namespace.is_ext:
+            self.write('#define X11_%s_MAJOR_VERSION %s' %
+                    (self.class_name.upper(), self.module.namespace.major_version))
+            self.write('#define X11_%s_MINOR_VERSION %s' %
+                    (self.class_name.upper(), self.module.namespace.minor_version))
         self.write()
         self.write('namespace x11 {')
         self.write()
@@ -1651,8 +1652,14 @@ def main():
     args = parser.parse_args()
 
     sys.path.insert(1, args.xcbproto_dir)
-    import xcbgen.xtypes
-    import xcbgen.state
+    try:
+        import xcbgen.xtypes
+        import xcbgen.state
+    except:
+        if sys.version_info < (3, 0):
+            import subprocess
+            subprocess.check_call(["python3"] + sys.argv)
+            return 0
 
     all_types = {}
     proto_src_dir = os.path.join(args.xcbproto_dir, 'src')
